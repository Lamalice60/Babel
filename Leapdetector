/*
 PROJET    : Banquet Interactif
 TYPE      : Controle Imprimante avec Arduino par LeapMotion
 LIBRARI   : Arduino/Firmata
 Leapmotion for processing par NOK
 DATE      : DEC_2015
 Add        : TimerClass
 
 
 VERSIONS :
 ---------------
 V.4 : Tout fonctionne (2axes) / 'arret'
 __A_UPDATE : Mettre une bouton de reinitialisation des relais
 ----
 V.5 : Keypressed et Method_AllMoteurOFF()
 __A_UPDATE :  ajouter commandes servo_moteur/voyant/laser
 ----
 V.6 : ServoMoteur PIN[3]PWM, inversement lacher d'ingrediant + LED en [2] et [4] 
 __A_UPDATE :  ajouter une delay finger
 ----
 V.7 : Delay mis en place et OKAi et LED ingredient et Stop motion
 */

// LEAPMOTION  LIB
import de.voidplus.leapmotion.*;

// ARDUINO FIRMATA
import processing.serial.*;
import cc.arduino.*;

PFont font;

// INIT
LeapMotion leap;
Arduino arduino;
Timer timerLockFinger;

final int[] ingrediantValueServo = {88, 150, 50, 88, 88, 88};
final int[] LED_ingd = {2, 4};
int position;
int alpha, i_finger;
int[] values = {Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW, Arduino.LOW };
int i_Minus;
final int[] Motor = {7, 11, 8, 12};

boolean lockMotion = false;
boolean newHand = true;

final float EcartAngle = PI/3;


void setup() {
  size(800, 800, OPENGL);
  // init arduino
  println("Arduino connected at" +Arduino.list());
  // Modify this line, by changing the "0" to the index of the serial
  // port corresponding to your Arduino board (as it appears in the list
  // printed by the line above).
  arduino = new Arduino(this, "COM7", 57600);

  // Alternatively, use the name of the serial port corresponding to your
  // Arduino (in double-quotes), as in the following line.
  // arduino = new Arduino(this, "/dev/tty.usbmodem621", 57600);

  // init LeapMotion
  leap = new LeapMotion(this);
  //init timer Finger
  timerLockFinger = new Timer(100);

  arduino.pinMode(3, Arduino.SERVO);
  arduino.servoWrite(3, 88); //position initial

  for (int i = 0; i <= 2; i++) {
    arduino.pinMode(i, Arduino.OUTPUT);
    arduino.digitalWrite(i, Arduino.LOW);
  }
  // Set the Arduino digital pins as outputs.
  for (int i = 4; i <= 13; i++) {
    arduino.pinMode(i, Arduino.OUTPUT);
    arduino.digitalWrite(i, Arduino.LOW);
  }
  font = loadFont("Akz.vlw");
  textFont(font, 36);
  textAlign(CENTER, CENTER);
}

void draw() {
  displayState();
  if (leap.hasHands()) {
    for (Hand hand : leap.getHands()) {

      //Acquisition Value
      int     hand_id          = hand.getId();
      PVector hand_position    = hand.getPosition();
      int     finger_count     = hand.countFingers();
      // what ingredients

      //Mapping autour du point d'origine (0,0)
      hand_position.x = map(hand_position.x, 100, 900, -100, 100);
      hand_position.z = map(hand_position.z, -30, 90, 100, -100);
      float z =  hand_position.z;
      float x =  hand_position.x;
      displayHand(z, x);

      // Calcul distance Centre/HAND
      float disCenter2Hand = dist(0, 0, hand_position.x, hand_position.z);

      // DEAD ZONE < 30
      if (disCenter2Hand < 30) {
        println("NO MOTION BUT UNLOCK MOTION");
        lockMotion = true;
        AllMoteurOFF();
      } else if (lockMotion) {
        // --- COMPARAISON ANGLEPOS_HAND avec zone de mouvement. ---
        for (int i = 1; i < 5; i++) {
          if (Handbetweeni(i, z, x)) {
            fill(255);
            noStroke();

            motorON(i);
          } else {
            noFill();
            strokeWeight(2);
            stroke(255);
            motorOFF(i);
          }
          displayDirection(i);
        }
      } else {
        println("Go to Middle to unlock motion");
      }
      fingerAction(hand.getOutstrechtedFingers().size());
    }
  } else {
    println("NoHands");
    lockMotion = false;
    AllMoteurOFF();
  }
}

void keyPressed() {
  char pressed = key;
  if (pressed == 'r') 
  {
    lockMotion = false;
    AllMoteurOFF();
    
  arduino.digitalWrite(8, Arduino.LOW);
  values[8] = Arduino.LOW;
  }
}


// ingrédient servoMoteur
void fingerAction(int _finger_count) {
  i_finger = _finger_count;

  if (i_finger != i_Minus) {
    timerLockFinger.start();
    if (timerLockFinger.isFinished()) {    

      if (i_finger == 1) {
        position = ingrediantValueServo[i_finger];
        arduino.digitalWrite(2, Arduino.HIGH);
        arduino.digitalWrite(4, Arduino.LOW);
        alpha = 1;
      } else if (i_finger == 2) {
        position = ingrediantValueServo[i_finger];
        arduino.digitalWrite(4, Arduino.HIGH);
        arduino.digitalWrite(2, Arduino.LOW);
        alpha = 2;
      } else if (i_finger == 0) {
        //    arduino.digitalWrite(4, Arduino.LOW);
        //  arduino.digitalWrite(2, Arduino.LOW);
      }


      if (i_finger == 5) {
        if (newHand) {
          println("Deversement restraint par NewHand : choisiser votre ingrediant avant de la lacher");
        } else {
          // si ce n'est pas une nouvelle mains et que mains relaché : ca deverse
          arduino.servoWrite(3, position);
        }
      } else {
        newHand = false;
        arduino.servoWrite(3, ingrediantValueServo[0]);
      }
      i_Minus = i_finger;
    }
  }
  fill(255);
  text(alpha, width/2, height/2);
  println(i_finger+"  "+alpha+"  "+i_Minus);
}

// Motor ON
void motorON(int _i) {
  int num = _i%4;
  int pinMotor = Motor[num];

  arduino.digitalWrite(pinMotor, Arduino.HIGH);
  values[pinMotor] = Arduino.HIGH;
}

// motorOFF
void motorOFF(int _i) {
  int num = _i%4;
  int pinMotor = Motor[num];
  arduino.digitalWrite(pinMotor, Arduino.LOW);
  values[pinMotor] = Arduino.LOW;
}
//allmoteurOFF
void AllMoteurOFF() {
  arduino.digitalWrite(12, Arduino.LOW);
  values[12] = Arduino.LOW;
  arduino.digitalWrite(11, Arduino.LOW);
  values[11] = Arduino.LOW;
  arduino.digitalWrite(7, Arduino.LOW);
  values[7] = Arduino.LOW;
  arduino.digitalWrite(8, Arduino.LOW);
  values[8] = Arduino.LOW;

  if (!lockMotion) {
    newHand = true;
    arduino.servoWrite(3, 88);
    arduino.digitalWrite(2, Arduino.LOW);
    arduino.digitalWrite(4, Arduino.LOW);
    arduino.digitalWrite(5, Arduino.HIGH);
    values[5] = Arduino.HIGH;
  }
}

// DISPLAY
void displayDirection(int _i) {
  pushMatrix();
  translate(width/2, height/2);
  float Xe = cos((_i-2)*(PI/2))*150;
  float Ye = - sin((_i-2)*(PI/2))*150;
  ellipse(Xe, Ye, 20, 20);
  popMatrix();
}

void displayHand(float _Z, float _X) {
  pushMatrix();
  translate(width/2, height/2);
  fill(255);
  ellipse(_X, _Z, 10, 10);
  popMatrix();
}
void displayState() {
  if (!lockMotion) {
    background(67, 0, 0);
  } else {
    background(0, 40, 0);
  }
  pushMatrix();
  translate(width/2, height/2);
  strokeWeight(2);
  stroke(130, 130, 130, 50);
  fill(150, 150, 150, 50);
  ellipse(0, 0, 60, 60);
  popMatrix();
  // display circle without hand
  for (int i = 1; i<5; i++) {
    noFill();
    strokeWeight(1);
    stroke(143, 143, 143);
    displayDirection(i);
  }
}

// ALGO DISTANGE ANGULAIRE
boolean Handbetweeni(int _i, float _Z, float _X) {

  // Angle entre -PI et PI de la position de la mains par rapport à l'axe X;
  float AnglePos_hand = - atan2(_Z, _X);
  println("Ox --------->"+AnglePos_hand);

  float limiteH = (_i-2)*(PI/2) + EcartAngle;
  float limiteL = (_i-2)*(PI/2) - EcartAngle;

  if ( _i == 4 ) {
    float limiteH0 = (-2)*(PI/2) + EcartAngle;
    float limiteL0 = (-2)*(PI/2) - EcartAngle;
    if (AnglePos_hand > limiteL && AnglePos_hand < limiteH) {
      return true;
    } else if (AnglePos_hand > limiteL0 && AnglePos_hand < limiteH0) {
      return true;
    } else {
      return false;
    }
  } else if (AnglePos_hand > limiteL && AnglePos_hand < limiteH) {
    return true;
  } else {
    return false;
  }
}
